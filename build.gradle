plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.palantir.docker' version '0.35.0'
    id 'org.sonarqube' version '4.3.1.3277'
}

group = project.properties['project.group']
version = project.properties['project.version']
archivesBaseName = project.properties['project.archivesBaseName']

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.2'
    implementation 'org.glassfish.jaxb:jaxb-core:4.0.2'
    implementation 'org.glassfish.jaxb:txw2:4.0.2'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'org.postgresql:postgresql:42.5.4'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

docker {
    project.group = group
    project.archivesBaseName = archivesBaseName
    name = 'studcare/stud-care-backend-service'
    tasks.getByName('dockerPrepare').dependsOn(tasks.getByName('bootJar'))
    copySpec.from("${project.buildDir}/libs/stud-care-backend-service-latest.jar")
    dockerfile = file('Dockerfile') as File
}

tasks.register('buildDocker') {
    dependsOn 'docker'
}

sonarqube {
    properties {
        property 'sonar.projectName' , project.properties['sonar.project.name']
        property 'sonar.projectKey' , project.properties['sonar.project.key']
        property 'sonar.host.url', project.properties['sonar.host.url']
        property 'sonar.sources', project.properties['sonar.source.location']
        property 'sonar.tests', project.properties['sonar.test.location']
        property 'sonar.exclusions', project.properties['sonar.exclusions']
        property 'sonar.coverage.jacoco.xmlReportPaths', project.properties['sonar.jacoco.xml.report.paths']
    }
}

jacocoTestReport{
    reports {
        xml.required=true
        csv.required=false
        html.required=true
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
